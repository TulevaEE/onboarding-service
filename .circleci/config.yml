version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@9.5.1
  aws-cli: circleci/aws-cli@5.3.2
  eb: circleci/aws-elastic-beanstalk@2.0.1
  codecov: codecov/codecov@5.3.0
  snyk: snyk/snyk@2.3.0
jobs:
  build:
    environment:
      TERM: dumb
    docker:
      - image: cimg/openjdk:21.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ arch }}-{{ checksum "build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Build
          command: ./gradlew build --no-daemon --stacktrace

      - snyk/scan:
          fail-on-issues: false
          organization: tuleva

      - store_test_results:
          path: ./build/test-results

      - store_artifacts:
          path: ./build/reports
          destination: /reports

      - codecov/upload

      - save_cache:
          key: v1-dependencies-{{ arch }}-{{ checksum "build.gradle.kts" }}
          paths:
            - ~/.gradle

      - persist_to_workspace:
          root: .
          paths:
            - build

  flag-for-additional-review:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Check for changes in monitored files on master branch
          command: |
            PATHS_TO_WATCH=(
                "src/main/resources/templates"
                "src/main/java/ee/tuleva/onboarding/payment/recurring"
            )

            echo "Monitoring paths on branch $CIRCLE_BRANCH:"
            for path_item in "${PATHS_TO_WATCH[@]}"; do
                echo "- ${path_item}"
            done
            
            CHANGED_FILES_OUTPUT=""

            if git rev-parse --verify HEAD~1 > /dev/null 2>&1; then
                echo "Comparing HEAD with HEAD~1 for monitored paths."
                CHANGED_FILES_OUTPUT=$(git diff --name-only HEAD~1 HEAD -- "${PATHS_TO_WATCH[@]}")
            else
                echo "No parent commit found (HEAD~1 does not exist). Skipping diff."
            fi

            if [ -n "$CHANGED_FILES_OUTPUT" ]; then
                echo "NOTICE: Files requiring additional review changed in monitored paths on master branch!"
                echo "${CHANGED_FILES_OUTPUT}"
            
                COMMIT_INFO_URL="$CIRCLE_BUILD_URL"
                COMMIT_SHA_SHORT=$(echo "$CIRCLE_SHA1" | cut -c1-7)
                GITHUB_COMMIT_URL="https://github.com/TulevaEE/onboarding-service/commit/$CIRCLE_SHA1"
                MESSAGE_CONTEXT="Branch: $CIRCLE_BRANCH (master), Commit: $COMMIT_SHA_SHORT, Triggered by: $CIRCLE_USERNAME."

                NOTIFICATION_MESSAGE="Additional review requested for changes in monitored paths on the master branch.\nDetails: $MESSAGE_CONTEXT\nFiles:\n${CHANGED_FILES_OUTPUT}\n CircleCI Build: $COMMIT_INFO_URL \nPlease review GitHub Commit: $GITHUB_COMMIT_URL"
            
                echo -e "$NOTIFICATION_MESSAGE"

                JSON_ESCAPED_MESSAGE=$(echo "$NOTIFICATION_MESSAGE" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
                TARGET_CHANNEL="review-changes" 

                if [ -n "$SLACK_REVIEW_CHANGES_WEBHOOK_URL" ]; then # Using your new variable name
                  PAYLOAD="{\"text\":\"${JSON_ESCAPED_MESSAGE}\", \"channel\":\"${TARGET_CHANNEL}\"}"
                  curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" "$SLACK_REVIEW_CHANGES_WEBHOOK_URL"
                  echo "Slack notification attempt sent to channel: ${TARGET_CHANNEL}."
                else
                  echo "SLACK_REVIEW_CHANGES_WEBHOOK_URL not set in CircleCI environment variables for this job/context. Skipping actual Slack notification."
                fi
            else
                echo "No files requiring additional review changed in monitored paths on master branch (or no applicable changes found)."
            fi

  deploy-staging:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - eb/setup
      - run:
          name: Deploy master to staging
          command: eb deploy onboarding-service-staging --label ${CIRCLE_SHA1} --timeout 20

  deploy-production:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - eb/setup
      - run:
          name: Deploy master to production
          command: eb deploy onboarding-service-env --label ${CIRCLE_SHA1} --timeout 20

  notify-sentry-deploy:
    docker:
      - image: cimg/base:stable
    environment:
      SENTRY_PROJECT: onboarding-service
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

workflows:
  version: 2
  onboarding-service-workflow:
    jobs:
      - build:
          context:
            - snyk
            - codecov

      - flag-for-additional-review:
          requires:
            - build
          context:
            - slack
          filters:
            branches:
              only: master

      - aws-ecr/build_and_push_image:
          name: build_and_push_image
          requires:
            - build
            - flag-for-additional-review
          context: aws
          auth:
            - aws-cli/setup
          path: build/docker
          build_path: build/docker
          repo: onboarding-service
          tag: 'latest,${CIRCLE_SHA1}'
          attach_workspace: true
          workspace_root: .
          filters:
            branches:
              only: master

      - deploy-staging:
          requires: [ build_and_push_image ]
          context: aws
          filters:
            branches:
              only: master

      - deploy-production:
          requires: [ build_and_push_image ]
          context: aws
          filters:
            branches:
              only: master

      - notify-sentry-deploy:
          requires: [ deploy-production ]
          context: sentry
          filters:
            branches:
              only: master
