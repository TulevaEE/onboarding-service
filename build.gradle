buildscript {
	ext {
		springBootVersion = '2.3.6.RELEASE'
		springBootAdminVersion = '2.3.1'
		springCloudSleuthVersion = '2.2.6.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.4")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.gorylenko.gradle-git-properties'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	maven {
		url "https://raw.githubusercontent.com/TulevaEE/releases-repo/master/"
	}
	maven {
		url "https://jitpack.io"
	}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	compileOnly('org.projectlombok:lombok:1.18.16')
	annotationProcessor('org.projectlombok:lombok:1.18.16')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-cache')
	implementation('org.springframework.boot:spring-boot-starter-aop')
	implementation('org.springframework.boot:spring-boot-starter-json')
	implementation('org.springframework.boot:spring-boot-starter-validation')
	implementation('org.springframework.cloud:spring-cloud-starter-sleuth')
	implementation('org.springframework.session:spring-session-jdbc')

	implementation('de.codecentric:spring-boot-admin-starter-client')
	implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.17.RELEASE')

	developmentOnly('org.springframework.boot:spring-boot-devtools')
	runtimeOnly('org.postgresql:postgresql')

	implementation('org.flywaydb:flyway-core')
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation('org.glassfish.jersey.inject:jersey-hk2:2.32')
	implementation('org.jsoup:jsoup:1.13.1')
	implementation('commons-net:commons-net:3.7.2')
	implementation('org.apache.commons:commons-lang3:3.11')
	implementation('net.sf.ehcache:ehcache')
	implementation('org.decampo:xirr:1.1')
	implementation('org.bouncycastle:bcpkix-jdk15on:1.66')
	implementation('org.eclipse.persistence:org.eclipse.persistence.moxy:2.7.7')

	implementation('com.github.SK-EID:smart-id-java-client:1.6.1')
	implementation('org.digidoc4j:digidoc4j:4.0.3') {
		exclude group: 'commons-logging', module: 'commons-logging'
	}

	implementation("io.sentry:sentry-spring-boot-starter:3.1.3")
	implementation("io.sentry:sentry-logback:3.1.3")
	implementation('io.springfox:springfox-swagger2:2.6.1')
	implementation('io.springfox:springfox-swagger-ui:3.0.0')

	implementation('org.hibernate:hibernate-java8')
	implementation('com.vladmihalcea:hibernate-types-52:2.10.0')

	implementation('com.mandrillapp.wrapper.lutung:lutung:0.0.8')

	implementation('com.sun.xml.ws:jaxws-rt:2.3.3')

	implementation('ee.sk.mid:mid-rest-java-client:1.2')

	testImplementation("com.h2database:h2")
	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude module: "spock-core"
	}

	testImplementation("org.spockframework:spock-core:1.3-groovy-2.5") {
		exclude group: "org.codehaus.groovy"
	}
	testImplementation("org.spockframework:spock-spring:1.3-groovy-2.5") {
		exclude group: "org.codehaus.groovy"
	}
	testImplementation("org.codehaus.groovy:groovy:2.5.13")
	testImplementation('com.github.tomakehurst:wiremock:2.26.3')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('org.mockftpserver:MockFtpServer:2.7.1')
}

dependencyManagement {
	imports {
		mavenBom("de.codecentric:spring-boot-admin-dependencies:$springBootAdminVersion")
		mavenBom("org.springframework.cloud:spring-cloud-sleuth:$springCloudSleuthVersion")
	}
}

test {
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		showCauses true
		showExceptions true
		showStackTraces true
		exceptionFormat = 'full'
	}
}

bootRun {
	systemProperty "file.encoding", "utf-8"
	systemProperty "spring.profiles.active", "dev"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		html.enabled false
	}
}

check.dependsOn jacocoTestReport

task zipWithExtensions(type: Zip) {
	dependsOn jar
	from(jar.outputs.files.singleFile) {
		rename { "application.jar" }
	}
	from("$rootDir/etc/eb/.ebextensions") {
		into(".ebextensions")
	}
	from("$rootDir/etc/eb/Procfile")
}

assemble.dependsOn zipWithExtensions

configurations {
	compile.exclude group: 'org.codehaus.jackson' // old jackson v1
}
